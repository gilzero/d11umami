<?php

declare(strict_types=1);

namespace Drupal\Tests\ui_patterns\Unit;

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Tests\UnitTestCase;
use Drupal\ui_patterns\Plugin\UiPatterns\PropType\LinksPropType;

/**
 * @coversDefaultClass \Drupal\ui_patterns\Plugin\UiPatterns\PropType\LinksPropType
 *
 * @group ui_patterns
 */
final class LinksPropTypeNormalizationTest extends UnitTestCase {

  /**
   * @covers ::canonicalize
   *
   * @dataProvider provideNormalizationData
   */
  public function testNormalize(array $value, array $expected): void {
    $normalized = LinksPropType::normalize($value);
    self::assertEquals($normalized, $expected);
  }

  /**
   * Provide data for testNormalize.
   */
  public static function provideNormalizationData(): \Generator {
    $data = [
      "Empty value" => [
        "value" => [],
        "expected" => [],
      ],
      "Standardized structure, flat, only primitives" => self::standardizedFlatPrimitives(),
      // "Standardized structure, flat, with objects" =>
      // self::standardizedFlatObjects(),
      "Breadcrumb structure, as generated by the core service" => self::breadcrumb(),
      "Mini pager, as generated by the Views module" => self::viewsMiniPager(),
      "Pager's pages, as generated by the Views module" => self::pagerPages(),
      "Pager's navigation links, as generated by the Views module" => self::pagesNavigationLinks(),
      // "Menu, as generated by the Menu module" => self::menu(),
      "Where link_attributes is already manually set" => self::linkAttributes(),
    ];
    foreach ($data as $label => $test) {
      yield $label => [
        $test['value'],
        $test['expected'],
      ];
    };
  }

  /**
   * Standardized structure, flat, only primitives.
   */
  protected static function standardizedFlatPrimitives() {
    $value = [
      [
        "title" => "With an absolute URL",
        "url" => "http://wwww.example.org/foo/bar",
      ],
      [
        "title" => "With a relative URL",
        "url" => "/foo/bar",
        "attributes" => [
          "foo" => "bar",
        ],
        "link_attributes" => [
          "foo" => "baz",
        ],
      ],
    ];
    $expected = $value;
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Standardized structure, flat, with objects.
   */
  protected static function standardizedFlatObjects() {
    $value = [
      [
        "title" => "With an absolute URL",
        "url" => Url::fromUri("http://wwww.example.org//foo/bar"),
      ],
      [
        "title" => "With a relative URL",
        "url" => Url::fromUserInput("/foo/bar", ["attributes" => ["foo" => "baz"]]),
        "attributes" => new Attribute([
          "foo" => "bar",
        ]),
      ],
      [
        "title" => "With empty attributes",
        "url" => Url::fromUserInput("/foo/bar", ["attributes" => []]),
        "attributes" => new Attribute([]),
      ],
    ];
    $expected = [
      [
        "title" => "With an absolute URL",
        "url" => "http://wwww.example.org/foo/bar",
      ],
      [
        "title" => "With a relative URL",
        "url" => "/foo/bar",
        "attributes" => [
          "foo" => "bar",
        ],
      ],
      [
        "title" => "With empty attributes",
        "url" => "/foo/bar",
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Breadcrumb structure, as generated by the core service.
   *
   * However, we replaced TranslatableMarkup("Home") by a simple string to
   * avoid initializing a service container in the test.
   */
  protected static function breadcrumb() {
    $value = [
      [
        "text" => "Home",
        "url" => "/",
      ],
      [
        "text" => "Foo",
        "url" => "/foo",
      ],
    ];
    $expected = [
      [
        "title" => "Home",
        "url" => "/",
      ],
      [
        "title" => "Foo",
        "url" => "/foo",
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Mini pager, as generated by the Views module.
   *
   * Usually, we don't expect the theme owner to use the normalization
   * directly, but to add some custom logic around 'current' in a preprocess.
   */
  protected static function viewsMiniPager() {
    $value = [
      "current" => 2,
      "previous" => [
        "href" =>
        "/articles?page=0",
        "text" => "‹‹",
        "attributes" => new Attribute(),
      ],
      "next" => [
        "href" => "/articles?page=2",
        "text" => "››",
        "attributes" => new Attribute(),
      ],
    ];
    $expected = [
      [
        "title" => "‹‹",
        "url" => "/articles?page=0",
      ],
      [
        "title" => "››",
        "url" => "/articles?page=2",
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Pager's pages, as generated by the Views module.
   */
  protected static function pagerPages() {
    $value = [
      [
        "href" => "?page=0",
        "attributes" => new Attribute(),
      ],
      [
        "href" => "?page=1",
        "attributes" => new Attribute([
          "aria-current" => "page",
        ]),
      ],
      [
        "href" => "?page=2",
        "attributes" => new Attribute(),
      ],
      [
        "href" => "?page=3",
        "attributes" => new Attribute(),
      ],
    ];
    $expected = [
      [
        "title" => '0',
        "url" => "?page=0",
      ],
      [
        "title" => '1',
        "url" => "?page=1",
        "attributes" => [
          "aria-current" => "page",
        ],
      ],
      [
        "title" => '2',
        "url" => "?page=2",
      ],
      [
        "title" => '3',
        "url" => "?page=3",
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Pager's navigation links, as generated by the Views module.
   */
  protected static function pagesNavigationLinks() {
    $value = [
      "first" => [
        "attributes" => new Attribute(),
        "href" => "?page=0",
        "text" => "« First",
      ],
      "previous" => [
        "attributes" => new Attribute(),
        "href" => "?page=0",
        "text" => "‹‹",
      ],
      "next" => [
        "attributes" => new Attribute(),
        "href" => "?page=2",
        "text" => "››",
      ],
      "last" => [
        "attributes" => new Attribute(),
        "href" => "?page=3",
        "text" => "Last »",
      ],
    ];
    $expected = [
      [
        "title" => "« First",
        "url" => "?page=0",
      ],
      [
        "title" => "‹‹",
        "url" => "?page=0",
      ],
      [
        "title" => "››",
        "url" => "?page=2",
      ],
      [
        "title" => "Last »",
        "url" => "?page=3",
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Menu, as generated by the Menu module.
   *
   * However, we replaced TranslatableMarkup() by a simple string to avoid
   * initializing a service container in the test.
   * And we replaced Url::fromRoute() by Url::fromUserInput() to avoid
   * initializing a service container in the test.
   */
  protected static function menu() {
    $value = [
      "user.page" => [
        "is_expanded" => FALSE,
        "is_collapsed" => FALSE,
        "in_active_trail" => FALSE,
        "attributes" => [],
        "title" => "My account",
        "url" => Url::fromUserInput("/user", ["set_active_class" => TRUE]),
        "below" => [],
      ],
      "user.logout" => [
        "is_expanded" => FALSE,
        "is_collapsed" => FALSE,
        "in_active_trail" => FALSE,
        "attributes" => [],
        "title" => "Log out",
        "url" => Url::fromUserInput("/user/logout", ["set_active_class" => TRUE]),
        "below" => [],
      ],
    ];
    $expected = [
      [
        "title" => "My account",
        "url" => "/user",
      ],
      [
        "title" => "Log out",
        "url" => "/user/logout",
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

  /**
   * Where link_attributes is already manually set.
   *
   * Instead of being generated from an Url object.
   */
  protected static function linkAttributes() {
    $value = [
      [
        "href" => "?page=0",
        "link_attributes" => new Attribute([
          'class' => [
            'display-flex',
            'flex-align-center',
            'flex-no-wrap',
          ],
        ]),
      ],
    ];
    $expected = [
      [
        "title" => '0',
        "url" => "?page=0",
        "link_attributes" => [
          'class' => [
            'display-flex',
            'flex-align-center',
            'flex-no-wrap',
          ],
        ],
      ],
    ];
    return [
      "value" => $value,
      "expected" => $expected,
    ];
  }

}
